<!DOCTYPE html>
<html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>Marko v4</title>
    </head>
    <body>
        <presentation>
            <!-- <@slide>
                <table>
                    <tr>
                        <td>
                            <markdown>

                            </markdown>
                        </td>
                    </tr>
                </table>
            </@slide> -->
            <@slide>
                <markdown>
                    ## Marko v4
                    ### What you need to know

                    March 15, 2017
                </markdown>
            </@slide>
            <@slide>
                <markdown>
                    ## Overview

                    - New website and docs!
                    - Merged in Marko Widgets
                    - Simplified and less boilerplate
                    - Virtual DOM speed boost
                    - Single file components
                </markdown>
            </@slide>
            <@slide>
                <iframe src="/" style={ width:'100%', height:'700px' }></iframe>
                <!-- <benchmarks/> -->
            </@slide>
            <@slide class="small-bullets">

                <markdown>
                    ## Marko Widgets
                    ## merged into Marko
                    ### WIDGET ➔ COMPONENT
                </markdown>
            </@slide>
            <@slide class="small-bullets">
                <markdown>
                    ## No more `w-` prefix

                    _Old:_

                    ```marko
                    <form w-on-submit='handleSubmit'>
                        <div w-for="nameInput">Name:</div>
                        <input type="text" w-id="nameInput">
                    </form>
                    ```

                    _New:_

                    ```marko
                    <form on-submit('handleSubmit')>
                        <div for-key="nameInput">Name:</div>
                        <input type="text" key="nameInput">
                    </form>
                    ```
                </markdown>
            </@slide>
            <@slide class="small-bullets">
                <markdown>
                    ## Less boilerplate

                    ### Removed:

                    - `w-bind`
                    - `w-extend`
                    - `require('marko-widgets').defineComponent(...)`
                    - `require('marko-widgets').defineWidget(...)`
                    - `require('marko-widgets').defineRenderer(...)`
                    - `getInitialState(input)`
                    - `getTemplateData(state, input)`
                    - `getWidgetConfig(input)`
                </markdown>
            </@slide>
            <@slide transition="fade-out">
                <markdown>
                    ## Old

                    _index.js_

                    ```js
                    module.exports = require('marko-widgets').defineComponent({
                      template: require('./template.marko'),
                      ...
                    });
                    ```

                    _template.marko_

                    ```marko
                    <div w-bind>
                        ...
                    </div>
                    ```

                </markdown>
            </@slide>
            <@slide transition="fade-in">
                <markdown>
                    ## New

                    _component.js_

                    ```js
                    module.exports = {
                      ...

                    };
                    ```

                    _index.marko_

                    ```marko
                    <div>
                        ...
                    </div>
                    ```

                </markdown>
            </@slide>
            <@slide class="small-bullets">
                <markdown>
                    ### Watched state

                    _Old:_

                    ```js
                    this.setState(this.state.count + 1);
                    ```

                    _New:_

                    ```js
                    this.state.count++;
                    ```
                </markdown>
            </@slide>
            <@slide>
                <markdown>
                    ### Component variables

                    - `input` - The input properties (formerly `data`)
                    - `state` - The component's state
                    - `component` - The component instance

                    ```marko
                    <div>
                        Hello ${input.name}!
                        Click count: ${state.count}
                        Location: ${component.getLocation()}
                    </div>
                    ```
                </markdown>
            </@slide>
            <@slide class="small-bullets">
                <markdown>
                    ### New component properties

                    ```js
                    this.input             // The input properties
                    this.state             // The component's state
                    this.getComponent(key) // Get ref to nested component
                    this.getEl(key)        // Get ref to nested HTML element
                    this.forceUpdate()     // Force a UI component rerender
                    ```

                </markdown>
            </@slide>
            <@slide>
                <markdown>
                    ### Simplified lifecycle methods

                    ```
                                                             ⤺
                    create → input → render → mount → render   update → destroy
                                                             ⤻
                    ```
                </markdown>
            </@slide>
            <@slide class="small-bullets">
                <markdown>
                    ## Event argument binding

                    ```marko
                    class {
                        onCreate() {
                            this.state = { count: 0 };
                        }
                        increment(delta, event, el) {
                            this.state.count += delta;
                        }
                    }

                    <button on-click('increment', 1)>Increase</button>
                    <button on-click('increment', -1)>Decrease</button>
                    ```
                </markdown>
            </@slide>
            <@slide class="small-bullets">
                <markdown>
                    ## @ tags

                    ```marko
                    <overlay>
                        <@title>
                            Membership agreement
                        </@title>
                        <@main>
                            Agree with these terms?
                        </@main>
                        <@footer>
                            <button>Yes</button>
                            <button>No</button>
                        </@footer>
                    </overlay>
                    ```

                    ```marko
                    <div.overlay>
                        <header if(input.title)><include(input.title)/></header>
                        <section.main if(input.main)><include(input.main)/></section>
                        <footer if(input.footer)><include(input.footer)/></footer>
                    </div>
                    ```
                </markdown>
            </@slide>

            <@slide>
                <markdown>
                    ## @ tags

                    ```marko
                    <app>
                        <@header condensed=true>
                            Hello!
                        </@header>
                    </app>
                    ```

                    _Compiled output:_
                    
                    ```js
                    app_tag({
                          header: {
                              condensed: true,
                              renderBody: function renderBody(out) {
                                out.w("Hello!");
                              }
                            }
                        }, out);
                    ```
                </markdown>
            </@slide>


            <@slide background-image="https://i.imgflip.com/1lgtqm.jpg" background-size="contain">
                &nbsp;
            </@slide>
            <@slide>
                <markdown>
                    ### Include components

                    ```marko
                    import fancyButton from './components/fancy-button';

                    <include(fancyButton) label="Click me"/>
                    ```
                </markdown>
            </@slide>
            <@slide>
                <markdown>
                    ### Include layouts

                    ```marko
                    <include('./my-layout.marko')>
                        <@main class="condensed">
                            This is the main content
                        </@main>
                        <@footer>
                            This is the footer content
                        </@footer>
                    </include>
                    ```

                    _my-layout.marko:_

                    ```marko
                    <section>
                        <main class=input.body.class>
                            <include(input.body)/>
                        </main>
                        <footer>
                            <include(input.footer)/>
                        </footer>
                    </section>
                    ```
                </markdown>
            </@slide>
            <@slide>
                <markdown>
                    ### Single-file components

                    ```marko
                    class {
                        // ...

                        increment() {
                            this.state.count++;
                        }
                    }

                    style.less {
                        .count {
                            color: #09c;
                        }
                    }

                    <div.click-count>
                        <span class="count">${state.count}</span>
                        <button class="button" on-click('increment')>
                            increment count
                        </button>
                    </div>
                    ```
                </markdown>
            </@slide>
            <@slide>
                <markdown>
                    ### Multi-file components

                    _component.js_

                    ```js
                    module.exports = class { /* ... */ };
                    ```

                    _style.less_

                    ```css
                    .count { color: #09c; }
                    ```

                    _index.marko_

                    ```marko
                    <div.click-count>
                        <span class="count">${state.count}</span>
                        <button class="button" on-click('increment')>
                            increment count
                        </button>
                    </div>
                    ```
                </markdown>
            </@slide>
            <@slide>
                <markdown>
                    ### Supporting files

                    <span style="color: #d02;">Gone: `index.js`, `widget.js`, `renderer.js`</span>

                    ```
                    components/hello/
                        compnent.js
                        index.marko
                        style.less
                    ```

                    ```
                    components/
                        hello.component.js
                        hello.marko
                        hello.style.less
                    ```
                </markdown>
            </@slide>
            <@slide>
                <markdown>
                    ### Split components

                    ```
                    components/hello/
                        component.js         # onCreate, onInput, onRender
                        component-browser.js # onMount, event handlers, etc.
                        index.marko          # view
                    ```

                    <small>
                        <ul>
                            <li>When rendered on the server, `index.marko` and `component.js` are loaded</li>
                            <li>When mounted in the browser, only `component-browser.js` is loaded</li>
                        </ul>
                    </small>
                </markdown>
            </@slide>
            <@slide>
                <markdown>
                    ### Split components

                    _index.marko:_

                    ```marko
                    class {
                        onCreate(input) { this.count = input.count || 0 }
                    }
                    <div on-click('increment')>
                        Click count <span>${component.count}</span>
                    </div>
                    ```

                    _component-browser.js_

                    ```js
                    module.exports = class {
                        increment() {
                            var countEl = this.el.querySelector('span');
                            countEl.innerHTML = ++this.count;
                        }
                    }
                    ```
                </markdown>
            </@slide>
            <@slide>
                <iframe src="/#benchmarks" style={ width: '100%', height: '700px'}></iframe>
                <!-- <benchmarks/> -->
            </@slide>
            <@slide transition="fade-out">
                <markdown>
                    ### HTML for the server

                    ```marko
                    <div>Hello ${input.name}!</div>
                    ```

                    _Compiled:_

                    ```js
                    var marko_template = require("marko/html").t(__filename),
                        marko_helpers = require("marko/runtime/html/helpers"),
                        marko_escapeXml = marko_helpers.x;

                    function render(input, out) {
                      out.w("<div>Hello " +
                        marko_escapeXml(input.name) +
                        "!</div>");
                    }
                    ```
                </markdown>
            </@slide>
            <@slide transition="fade-in">
                <markdown>
                    ### VDOM for the browser

                    ```marko
                    <div>Hello ${input.name}!</div>
                    ```

                    _Compiled:_

                    ```js
                    var marko_template = require("marko/vdom").t(__filename);


                    function render(input, out) {
                      out.e("DIV", null, 3)
                        .t("Hello ")
                        .t(input.name)
                        .t("!");
                    }
                    ```
                </markdown>
            </@slide>
            <@slide>
                <markdown>
                    ### Static VDOM nodes

                    ```marko
                    <div>This is a <strong>static</strong> node</div>
                    ```

                    _Compiled:_

                    ```js
                    var marko_node0 = marko_createElement("DIV", null, 3, ...)
                      .t("This is a ")
                      .e("STRONG", null, 1)
                        .t("static")
                      .t(" node");

                    function render(input, out) {
                      out.n(marko_node0);
                    }
                    ```
                </markdown>
            </@slide>
            <@slide>
                <markdown>
                    ### Static VDOM attributes

                    ```marko
                    <div.hello>Hello ${input.name}!</div>
                    ```

                    _Compiled:_

                    ```js
                    var marko_attrs0 = {
                            "class": "hello"
                          };

                    function render(input, out) {
                      out.e("DIV", marko_attrs0, 3)
                        .t("Hello ")
                        .t(input.name)
                        .t("!");
                    }
                    ```
                </markdown>
            </@slide>
            <@slide>
                <markdown>
                    ### Inline JavaScript

                    ```marko
                    $ var name = input.firstName + ' ' + input.lastName;
                    $ name = name.toUpperCase();
                    $ console.log(name);

                    <div>
                        Hello ${name}!
                        <for(color in ['red', 'green', 'blue'])>
                            $ color = color.toUpperCase();
                            ${color}
                        </for>
                    </div>
                    ```
                </markdown>
            </@slide>
            <@slide>
                <markdown>
                    ### Inline static JavaScript

                    _Old:_

                    ```marko
                    <script marko-init>
                        function formatName(person) {
                            return person.firstName + ' ' + person.lastName;
                        }
                    </script>

                    <div>Hello ${formatName(input.person)}!</div>
                    ```

                    _New:_

                    ```marko
                    static function formatName(person) {
                        return person.firstName + ' ' + person.lastName;
                    }
                    <div>Hello ${formatName(input.person)}!</div>
                    ```
                </markdown>
            </@slide>
            <@slide>
                <markdown>
                    ### import

                    ```marko
                    import { formatName } from './helpers';

                    <div>
                        Hello ${formatName(input.person)}!
                    </div>
                    ```
                </markdown>
            </@slide>
            <@slide>
                <markdown>
                    ### Consistent rendering API

                    #### Components and templates
                    #### export the same API

                    ```js
                    require('./template.marko')
                        .renderSync({ name: 'Frank' })
                        .appendTo(document.body);
                    ```
                </markdown>
            </@slide>
        </presentation>
    </body>
</html>
