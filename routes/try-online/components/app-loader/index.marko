import series from 'raptor-async/series';

static {
    function loadCodeMirror(callback) {

    }
}
class {
    onCreate() {
        this.state = {
            loading: false,
            error: undefined,
            tooSmall: false
        }
    }

    onMount() {
        var targetEl = this.el;
        var input = this.input;
        var app;

        function isLargeEnough() {
            var windowSize = document.body.innerWidth || document.body.clientWidth;
            return windowSize > 1000;
        }

        var self = this;

        function doLoad() {
            if (self.state.loading) {
                return;
            }

            self.state.loading = true;

            function loadCodeMirror(callback) {
                require('lasso-loader').load({
                    js: [
                        "https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.24.2/codemirror.min.js"
                    ]
                }, callback);
            }

            function loadSimpleScrollbars(callback) {
                require('lasso-loader').load({
                    js: [
                        "https://codemirror.net/addon/scroll/simplescrollbars.js"
                    ]
                }, callback);
            }

            function loadAndRenderApp(callback) {
                require('lasso-loader').async(function(err) {
                        if (err) {
                            return callback(err);
                        }

                        app = require('../app');
                        callback();
                    });
            }

            series([
                    loadCodeMirror,
                    loadSimpleScrollbars,
                    loadAndRenderApp
                ],
                function(err) {
                    if (err) {
                        if (console) {
                            console.log(err);
                        }
                        self.state.error = err;
                    } else {
                        app.renderSync(input)
                            .replace(targetEl)
                    }

                });
        }

        if (isLargeEnough()) {
            doLoad();
        } else {
            this.state.tooSmall = true;

            this.subscribeTo(window)
                .on('resize', function() {
                    if (isLargeEnough()) {
                        self.subscribeTo(window)
                            .removeAllListeners();

                        doLoad();
                    }
                });
        }
    }
}

<div.app-loader>
    <if(state.error)>
        <div>
            An error has occurred
        </div>
    </if>
    <else if(state.tooSmall)>
        <div.too-small>
            <div.overlay>
                <h1>Screen width too small</h1>
                <h2>Please increase the window size or rotate to load.</h2>
                <h3>If you are on a mobile phone, please open on a desktop</h3>
                <h4><a href="/docs/getting-started/">View Docs</a></h4>
            </div>
        </div>
    </else>
    <else>
        <spinner/>
    </else>
</div>
