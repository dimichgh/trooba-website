import app from '~/routes/try-online/app';
import path from 'path';
import vmodules from '~/routes/try-online/app/vmodules';
import debounce from 'lodash.debounce';

static {
    if (typeof window !== 'undefined') {
        require('codemirror-atom-modes').registerGrammars([
                require('language-css/grammars/css.cson'),
                require('language-javascript/grammars/javascript.cson'),
                {
                    grammar: require('language-marko/grammars/marko.cson'),
                    options: {
                        scopeTranslations: {
                            'meta.section.marko-placeholder': 'strong',
                            'meta.section.marko-attribute': 'strong',
                            'support.function.marko-tag': 'strong tag',
                            'support.function.marko-attribute': 'strong attribute',
                            'entity': 'def',
                            'meta.property-name': 'property-name',
                            'meta.property-value': 'property-value'
                        }
                    }
                }
            ], CodeMirror);
    }
}

class {
    onCreate() {
        this.state = {
            error: undefined
        };
    }
    getMode(file) {
        let ext = path.extname(file.name);

        if (ext === '.marko') {
            return 'Marko';
        } else if (ext === '.css' || ext === '.less') {
            return 'css';
        } else if (ext === '.js' || ext === '.json') {
            return 'javascript';
        }
    }

    onMount() {
        let file = this.input.file;
        let outputMode = this.input.outputMode || 'preview';
        let codeMirrorMode = this.input.mode;
        let code = this.input.code != null ? this.input.code : file.text;
        let readOnly = this.input.readOnly === true;

        let codeMirrorConfig = {
            value: code || '',
            mode: codeMirrorMode || this.getMode(file),
            lineNumbers: true,
            readOnly: readOnly,
            indentUnit: 4,
            lineWrapping: true,
            scrollbarStyle: 'simple'
        };

        codeMirrorConfig.theme = 'marko';

        /*jshint newcap: false */
        this.codeMirror = CodeMirror(this.getEl('codeMirrorContainer'), codeMirrorConfig);

        this.codeMirror.setSize("100%", "100%");

        let error;

        let showError = () => {
            this.state.error = error;
        };

        showError = debounce(showError, 500);

        let loadModule = () => {
            let module;

            try {
                module = vmodules.loadFile(this.input.file.path);
                error = undefined;
            } catch(err) {
                error = err;
            }

            if (error) {
                // We should delay showing errors until there is a pause
                // in typing
                showError();
            } else {
                // Errors should disappear immediately...
                this.state.error = undefined;
            }
        }

        if (!readOnly) {
            this.codeMirror.on('change', (editor) => {
                let source = editor.getValue();
                app.saveFile(file.path, source);
            });

            this.subscribeTo(app)
                .on('file:modified', () => {
                    loadModule();
                });

            loadModule();
        }

        this.subscribeTo(app)
            .on('focus:change', (focusedFile) => {
                if (focusedFile === file.path) {
                    this.codeMirror.focus();
                    this.codeMirror.refresh();

                    if (!readOnly) {
                        loadModule();
                    }
                }
            });
    }

    focus() {
        let file = this.input.file;
        app.focusFile(file.path);
    }

    jumpToError(error) {
        let pos = error.pos || error.endPos;
        if (!pos) {
            return;
        }

        this.codeMirror.focus();

        this.codeMirror.setCursor({
            line: pos.line - 1,
            ch: pos.column
        });
    }

    setCode(newCode) {
        var scrollInfo = this.codeMirror.getScrollInfo();
        this.codeMirror.setValue(newCode);
        this.codeMirror.scrollTo(scrollInfo.left, scrollInfo.top);
    }

    /*
    handleInput() {
        let file = file;
        let source = this.getEl('textarea').value;
        app.updateFile(file.path, source);
    }
    */
}

$ let file = input.file;

<div.editor on-click('focus')>
    <div.code-mirror-container key="codeMirrorContainer" no-update></div>
    <!-- <textarea style={width: '100%', height: '100%'}
        on-input('handleInput')
        key='textarea'
        >${file.text}</textarea> -->
    <div.errors-container if(state.error)>
        <editor-errors file=file error=state.error on-errorSelected('jumpToError')/>
    </div>
</div>
