import vmodules from '~/routes/try-online/app/vmodules';
import app from '~/routes/try-online/app';
import fs from 'fs';
import debounce from 'lodash.debounce';
import {prettyPrint as htmlPrettyPrint} from 'html';

static function getHtmlCodeFromOutput(output) {
    var node = output.actualize(document);
    var containerEl = document.createElement('body');
    containerEl.appendChild(node);
    var html = containerEl.innerHTML;
    html = htmlPrettyPrint(html);
    return html;
}

class {
    onCreate() {
        this.state = {
            error: undefined
        };
    }

    onMount() {
        this.styleCode = null;
        this.styleEls = null;

        this.subscribeTo(app).on('file:modified', () => {
            setTimeout(() => {
                this.renderToFrame();
            }, 0);
        });


        this.iframeLoaded = new Promise((resolve, reject) => {
            var iframe = this.iframe = document.createElement('iframe');
            iframe.src = 'about:blank';
            iframe.onload = function() {
                resolve();
            };
            this.getEl('iframeContainer').appendChild(iframe);
        });

        var showError = () => {
            this.state.error = this.error;
        }

        this.showError = debounce(showError, 500);

        this.renderToFrame();
    }

    renderToFrame() {
        var outputMode = this.input.outputMode || 'preview';
        var file = this.input.file;
        var templateModule;
        var loadError;

        try {
            templateModule = vmodules.loadFile(file.path);
        } catch(err) {
            loadError = err;
        }

        this.state.error = this.error = undefined;

        var showError = (error) => {
            this.error = error;
            this.showError();
        };

        if (outputMode === 'preview') {
            this.iframeLoaded.then(() => {
                if (loadError) {
                    this.state.error = undefined;
                    this.iframe.contentDocument.body.innerHTML = 'Template failed to load';
                    return;
                }

                var template = templateModule.exports;

                this.updateCSS();

                var currentRender = this.currentRender = {};

                this.state.error = undefined;

                return template.render()
                    .then((renderResult) => {
                        if (this.currentRender === currentRender) {
                            renderResult.replaceChildrenOf(this.iframe.contentDocument.body);
                        }
                    })
                    .catch((err) => {
                        if (this.currentRender === currentRender) {
                            this.iframe.contentDocument.body.innerHTML = '';
                            showError(err);
                        }
                    });
            });
        } else if (outputMode === 'compiled') {
            let code;

            if (loadError) {
                code = '// Unable to load template';
            } else {
                code = templateModule.source;
            }

            this.getComponent('editorCompiled')
                .setCode(code);
        } else if (outputMode === 'html') {
            let code;

            if (loadError) {
                code = '<!-- Unable to load template -->';
                this.getComponent('editorHTML').setCode(code);
                return;
            }

            var currentRender = this.currentRender = {};
            let template = templateModule.exports;

            template.render()
                .then((renderResult) => {
                    if (this.currentRender === currentRender) {
                        let html = getHtmlCodeFromOutput(renderResult.getOutput());
                        this.getComponent('editorHTML').setCode(html);
                    }
                })
                .catch((err) => {
                    if (this.currentRender === currentRender) {
                        this.error;
                        showError(err);
                    }
                });
        }

    }

    updateCSS() {
        var newStyleCode = '';
        var file = this.input.file;

        var templateModule;

        try {
            templateModule = vmodules.loadFile(file.path);
        } catch(err) {
            return;
        }

        var template = templateModule.exports;
        var doc = this.iframe.contentDocument;
        if (!template.getDependencies) {
            return;
        }

        var styleCodeList = [];

        var dependencies = template.getDependencies({
                require: vmodules.require,
                resolveFrom: vmodules.resolveFrom
            });
        dependencies.forEach((dependency) => {
            if (dependency.type !== 'css') {
                return;
            }

            var code = dependency.code;
            if (!code) {
                if (dependency.path) {
                    code = fs.readFileSync(dependency.path);
                }
            }

            if (code) {
                newStyleCode += '\n' + code;
                styleCodeList.push(code);
            }
        });

        if (newStyleCode !== this.styleCode) {

            if (this.styleEls) {
                this.styleEls.forEach((styleEl) => {
                    styleEl.parentNode.removeChild(styleEl);
                });
            }

            this.styleCode = newStyleCode;
            this.styleEls = [];

            styleCodeList.forEach((styleCode) => {
                var styleEl = doc.createElement('style')
                styleEl.type = 'text/css'
                styleEl.innerText = styleCode;
                doc.getElementsByTagName('head')[0].appendChild(styleEl);
                this.styleEls.push(styleEl);
            });
        }
    }
}

$ var file = input.file;
$ var outputMode = input.outputMode || 'preview';
$ var code = state.code;

<div.preview class='mode-'+outputMode>
    <div.iframe-container key="iframeContainer" no-update>
    </div>

    <if(outputMode === 'html')>
        <editor file=file code='' key='editorHTML' read-only mode='htmlmixed' output-mode=outputMode no-update />
    </if>
    <else if(outputMode === 'compiled')>
        <editor file=file code='' key='editorCompiled' read-only mode='javascript' output-mode=outputMode no-update />
    </else>

    <div.errors-container if(state.error)>
        <preview-errors error=state.error file=file/>
    </div>
</div>
